task('breakBuildForValidPersonnummer') {
    doLast {
        def testpersonnummer = new File("statistik-service/src/main/resources/personnr/testpersoner.log").text
        def allowedPnrs = [ "19121212-1212", "191212121212", "121212-1212", "1212121212" ] //Tolvan Tolvansson, testpersonnummer

        FileTree tree = fileTree(dir: '.').exclude('**/.gradle', '**/.idea', '**/node_modules', '**/bower_components', '**/*.iml', '**/*.jar')
        tree.each {File file ->
            if (file.file) {
                def pnrs = file.text.findAll(/(\d{2})?\d{6}-?\d{4}/)
                if (!pnrs.isEmpty()) {
                    pnrs.each { pnr ->
                        if (!allowedPnrs.contains(pnr) && !testpersonnummer.contains(pnr) && validatePnr(pnr)) {
                            throw new GradleException("Found valid personnummer: " + pnr + " in file: " + file.canonicalPath)
                        }
                    }
                }
            }
        }
    }
}

// Kontroll av personnummer enligt https://sv.wikipedia.org/wiki/Luhn-algoritmen
def validatePnr(String pnr) {
    def pnrNumberOnly = pnr.replaceAll(/\D/,"")
    if (pnrNumberOnly.length() < 10) {
        return false
    }
    def pnrShort = pnrNumberOnly.substring(pnrNumberOnly.length() - 10, pnrNumberOnly.length())
    if (pnrShort.startsWith("00")) {
        return false
    }

    // Kollar att det Ã¤r ett personnummer och inte ett orgnr, orgnr gar latt att hitta pa internet och kan darfor inte vara skyddat
    def month = Integer.parseInt(pnrShort.substring(2, 4))
    def day = Integer.parseInt(pnrShort.substring(4, 6))
    if (month > 12 || day > 31) {
        return false
    }

    def shortPnrChars = pnrShort.toCharArray()
    int sum = 0;
    shortPnrChars.eachWithIndex{ num, idx ->
        def product = Integer.parseInt(new String(num)) * (((idx + 1) % 2) + 1)
        sum += product / 10 + product % 10;
    }
    return sum % 10 == 0
}

apply plugin: 'groovy'
apply plugin: 'se.inera.intyg.plugin.fitnesse'
apply plugin: 'nebula.grunt'

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}")
}

tasks.withType(GroovyCompile) {
    options.encoding = "UTF-8" // for Java compilation
    groovyOptions.encoding = "UTF-8" // for Groovy compilation
}

task pathingJar(type: Jar) {
    dependsOn(configurations.runtime)
    archiveAppendix.set("pathing")

    doFirst {
        manifest {
            def classpath = configurations.runtime.files.stream()
                    .map({it.toURI().toURL().toString().replaceFirst("file:/", "/")})
                    .collect()
                    .join(" ")


            def mainClass = "se.inera.statistics.InsertIntygHelper"

            attributes["Class-Path"] = classpath
            attributes["Main-Class"] = mainClass
        }
    }
}

task setupIntygForProtractor(dependsOn: [classes, pathingJar], type: JavaExec) {

    def statisticsUrl = 'http://localhost:8050/'
    def baseUrl = System.properties['baseUrl'] ?: "http://localhost:8050/"

    jvmArgs = ['-DbaseUrl=' + baseUrl]

    main = 'se.inera.statistics.InsertIntygHelper'
    // classpath = sourceSets.main.runtimeClasspath
    classpath = files(
            "${projectDir}/build/classes/groovy/main",
            "${projectDir}/build/classes/java/main",
            "${projectDir}/src/main/resources",
            "${projectDir}/build/resources/main",
            pathingJar.archiveFile)
}


task protractorTest(type: NodeTask, dependsOn: [npmInstall, setupIntygForProtractor]) {
    outputs.upToDateWhen { false }
    def environment = System.properties['protractor.env'] ?: "dev"

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ["default:${environment}"]
}

fitnesse {
    port = 9125
    fitnesseMainClass = "fitnesseMain.FitNesseMain"
    root = "FitNesseRoot"
    workingDir = "src/test/fitnesse"
    wikiStartPage = "StatisticsTests"

    if (project.hasProperty('fileOutput')) {
        outputFormat = project.findProperty('outputFormat') ?: "xml&includehtml"
    }

    def baseUrl = 'http://localhost:8050/'
    extraProperties = ["baseUrl": System.properties['baseUrl'] ?: "http://localhost:8050/"]
}

clean {
    delete "${projectDir}/src/test/fitnesse/FitNesseRoot/ErrorLogs"
    delete "${projectDir}/src/test/fitnesse/FitNesseRoot/files/testResults"
    delete "${projectDir}/catalina.base_IS_UNDEFINED"
}

dependencies {
    compile project(":statistik-web")

    compile "org.fitnesse:fitnesse:${fitnesseVersion}"
    compile "org.codehaus.groovy:groovy-all:${groovyAllVersion}"
    compile "org.codehaus.groovy.modules.http-builder:http-builder:${groovyHttpVersion}"
    compile "org.apache.httpcomponents:httpmime"
    compile "org.apache.httpcomponents:httpcore"
    compile "org.liquibase:liquibase-core"

    // The reason why these dependencies are specified with "transitive = false" is that some obsolete
    // platforms (e.g. Windows) cannot handle a very long command line, and the full, transitive
    // dependency graph makes these platforms bail out. That means that some dependencies must
    // be explicitly specified further down.
    fitnesse(project(":statistik-web")) { transitive = false }
    fitnesse(project(":statistik-service")) { transitive = false }
    fitnesse(project(":statistik-test")) { transitive = false }

    fitnesse ("org.fitnesse:fitnesse:${fitnesseVersion}") {
        exclude group: "org.slf4j", module: "slf4j-jdk14"
    }

    fitnesse "org.liquibase:liquibase-core"
    fitnesse "org.codehaus.groovy:groovy-dateutil:${groovyAllVersion}"
    fitnesse "org.codehaus.groovy:groovy-all:${groovyAllVersion}"
    fitnesse "org.codehaus.groovy.modules.http-builder:http-builder:${groovyHttpVersion}"
    fitnesse "org.apache.httpcomponents:httpmime"
    fitnesse "org.apache.httpcomponents:httpcore"
    fitnesse "com.google.guava:guava:${googleGuavaVersion}"
    fitnesse "org.springframework:spring-core"
    fitnesse "org.springframework:spring-context"
    fitnesse "org.springframework.data:spring-data-jpa"
    fitnesse "org.slf4j:slf4j-api"
    fitnesse "jakarta.ws.rs:jakarta.ws.rs-api"
}

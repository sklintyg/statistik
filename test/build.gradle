apply plugin: 'groovy'
apply plugin: 'se.inera.intyg.plugin.fitnesse'
apply plugin: 'com.moowork.grunt'

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}")
}

tasks.withType(GroovyCompile) {
    options.encoding = "UTF-8" // for Java compilation
    groovyOptions.encoding = "UTF-8" // for Groovy compilation
}

task setupIntygForProtractor(dependsOn: 'classes', type: JavaExec) {

    def statisticsUrl = 'http://localhost:8080/'

    if (project.hasProperty('runWithIntyg')) {
        statisticsUrl = 'http://localhost:9101/'
    }

    def baseUrl = System.properties['baseUrl'] ?: "http://localhost:8080/"

    jvmArgs = ['-DbaseUrl=' + baseUrl]

    main = 'se.inera.statistics.InsertIntygHelper'
    classpath = sourceSets.main.runtimeClasspath
}

task protractorTest(type: NodeTask, dependsOn: [npmInstall, setupIntygForProtractor]) {
    outputs.upToDateWhen { false }
    def environment = System.properties['protractor.env'] ?: "dev"

    script = file('node_modules/grunt-cli/bin/grunt')
    args = ["default:${environment}"]
}

fitnesse {
    port = 9125
    mainClass = "fitnesseMain.FitNesseMain"
    root = "FitNesseRoot"
    workingDir = "src/test/fitnesse"
    wikiStartPage = "StatisticsTests"

    if (project.hasProperty('fileOutput')) {
        outputFormat = project.findProperty('outputFormat') ?: "xml&includehtml"
    }

    def baseUrl = 'http://localhost:8080/'

    if (project.hasProperty('runWithIntyg')) {
        baseUrl = 'http://localhost:9101/'
    }

    extraProperties = ["baseUrl": System.properties['baseUrl'] ?: "http://localhost:8080/"]
}

if (project.hasProperty('runFitnesse')) {
    apply plugin: 'org.gretty'
    gretty {
        def baseUrl = 'http://localhost:8080'

        if (project.hasProperty('runWithIntyg')) {
            httpPort = 9101
            baseUrl = 'http://localhost:9101'
        }

        contextPath = '/'
        contextConfigFile = project(":statistik-web").projectDir.path + "/src/main/webapp/WEB-INF/jetty-context.xml"
        jvmArgs = ["-Dcertificate.logback.file=${projectDir}/src/main/resources/logback-test.xml",
                   '-DbaseUrl=' + baseUrl,
                   '-Dspring.profiles.active=dev,testapi,embedded,hsa-stub,security-fake,skipTestIntygInjection',
                   '-Dstatistics.config.file=' + project(":statistik-web").projectDir.path + '/src/main/resources/default.properties',
                   '-Dstatistics.credentials.file=' + project(":statistik-web").projectDir.path + '/src/main/resources/dev-credentials.properties',
                   '-Dstatistics.resources.folder=' + projectDir + '/../src/main/resources'
        ]
    }

    farms {
        farm 'Fitnesse', {
            webapp ":statistik-web"
            webapp project
            if (project.hasProperty('runFitnesse') && project.hasProperty('runProtractor')) {
                integrationTestTask = 'allIntegrationTests'
            } else if (project.hasProperty('runFitnesse')) {
                integrationTestTask = 'fitnesseTest'
            } else {
                integrationTestTask = 'protractorTest'
            }
        }
    }

    dependencies {
        gretty "com.h2database:h2:${h2Version}"
        gretty "mysql:mysql-connector-java:${mysqlConnectorVersion}"
        gretty "org.apache.activemq:activemq-broker:${activeMqVersion}"
        gretty "org.apache.tomcat:tomcat-catalina:${tomcatVersion}"
    }
}

clean {
    delete "${projectDir}/src/test/fitnesse/FitNesseRoot/ErrorLogs"
    delete "${projectDir}/src/test/fitnesse/FitNesseRoot/files/testResults"
    delete "${projectDir}/catalina.base_IS_UNDEFINED"
}

dependencies {
    compile project(":statistik-web")

    compile "org.fitnesse:fitnesse:${fitnesseVersion}"
    compile "org.codehaus.groovy:groovy-all:${groovyAllVersion}"
    compile "org.codehaus.groovy.modules.http-builder:http-builder:${groovyHttpVersion}"
    compile "org.apache.httpcomponents:httpmime:${httpVersion}"
    compile "org.apache.httpcomponents:httpcore:${httpVersion}"

    // The reason why these dependencies are specified with "transitive = false" is that some obsolete
    // platforms (e.g. Windows) cannot handle a very long command line, and the full, transitive
    // dependency graph makes these platforms bail out. That means that some dependencies must
    // be explicitly specified further down.
    fitnesse(project(":statistik-web")) { transitive = false }
    fitnesse(project(":statistik-service")) { transitive = false }
    fitnesse(project(":statistik-test")) { transitive = false }

    fitnesse "org.fitnesse:fitnesse:${fitnesseVersion}"
    fitnesse "org.codehaus.groovy:groovy-all:${groovyAllVersion}"
    fitnesse "org.codehaus.groovy.modules.http-builder:http-builder:${groovyHttpVersion}"
    fitnesse "org.apache.httpcomponents:httpmime:${httpVersion}"
    fitnesse "org.apache.httpcomponents:httpcore:${httpVersion}"
    fitnesse "com.google.guava:guava:${googleGuavaVersion}"
    fitnesse "org.springframework:spring-core:${springContextVersion}"
    fitnesse "org.springframework:spring-context:${springContextVersion}"
    fitnesse "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}"
    fitnesse "org.slf4j:slf4j-api:${slf4jVersion}"
    fitnesse "javax.ws.rs:javax.ws.rs-api:${javaxWsRsApiVersion}"
}

apply plugin: 'se.inera.intyg.plugin.fitnesse'
apply plugin: 'com.netflix.nebula.grunt'
apply plugin: 'groovy'

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}")
}

npmInstall {
    args = ['install', '--legacy-peer-deps']
}

tasks.withType(GroovyCompile).configureEach {
    options.encoding = "UTF-8" // for Java compilation
    groovyOptions.encoding = "UTF-8" // for Groovy compilation
}

tasks.register('pathingJar', Jar) {
    dependsOn configurations.runtimeOnly
    archiveAppendix.set("pathing")

    doFirst {
        manifest {
            def classpath = configurations.runtimeOnly.files.stream()
                    .map({ it.toURI().toURL().toString().replaceFirst("file:/", "/") })
                    .collect()
                    .join(" ")
            def mainClass = "se.inera.statistics.InsertIntygHelper"
            attributes["Class-Path"] = classpath
            attributes["Main-Class"] = mainClass
        }
    }
}

tasks.register('setupIntygForProtractor', JavaExec) {
    dependsOn classes, pathingJar

    def baseUrl = System.properties['baseUrl'] ?: "http://localhost:8050/"
    jvmArgs = ['-DbaseUrl=' + baseUrl]
    main = 'se.inera.statistics.InsertIntygHelper'
    classpath = files(
            "${projectDir}/build/classes/groovy/main",
            "${projectDir}/build/classes/java/main",
            "${projectDir}/src/main/resources",
            "${projectDir}/build/resources/main",
            pathingJar.archiveFile)
}

tasks.register('protractorTest', NodeTask) {
    dependsOn npmInstall, setupIntygForProtractor
    outputs.upToDateWhen { false }

    def environment = System.properties['protractor.env'] ?: "dev"
    script = file('node_modules/grunt-cli/bin/grunt')
    args = ["default:${environment}"]
}

fitnesse {
    port = 9125
    fitnesseMainClass = "fitnesseMain.FitNesseMain"
    root = "FitNesseRoot"
    workingDir = "src/test/fitnesse"
    wikiStartPage = "StatisticsTests"

    if (project.hasProperty('fileOutput')) {
        outputFormat = project.findProperty('outputFormat') ?: "xml&includehtml"
    }

    def baseUrl = 'http://localhost:8050/'
    extraProperties = ["baseUrl": System.properties['baseUrl'] ?: "http://localhost:8050/"]
}

clean {
    delete "${projectDir}/src/test/fitnesse/FitNesseRoot/ErrorLogs"
    delete "${projectDir}/src/test/fitnesse/FitNesseRoot/files/testResults"
    delete "${projectDir}/catalina.base_IS_UNDEFINED"
}

dependencies {
    implementation project(':statistik-service')
    implementation project(":statistik-web")

    implementation "org.fitnesse:fitnesse:${fitnesseVersion}"
    implementation "org.codehaus.groovy:groovy-all:${groovyAllVersion}"
    implementation "org.codehaus.groovy.modules.http-builder:http-builder:${groovyHttpVersion}"
    implementation "org.apache.httpcomponents:httpmime"
    implementation "org.apache.httpcomponents:httpcore"
    implementation "org.liquibase:liquibase-core"

    compileOnly "jakarta.ws.rs:jakarta.ws.rs-api"

    // The reason why these dependencies are specified with "transitive = false" is that some obsolete
    // platforms (e.g. Windows) cannot handle a very long command line, and the full, transitive
    // dependency graph makes these platforms bail out. That means that some dependencies must
    // be explicitly specified further down.
    fitnesse(project(":statistik-web")) { transitive = false }
    fitnesse(project(":statistik-service")) { transitive = false }
    fitnesse(project(":statistik-test")) { transitive = false }
    fitnesse ("org.fitnesse:fitnesse:${fitnesseVersion}") { exclude group: "org.slf4j", module: "slf4j-jdk14" }

    fitnesse "ch.qos.logback:logback-classic"
    fitnesse "com.google.guava:guava:${googleGuavaVersion}"
    fitnesse "jakarta.ws.rs:jakarta.ws.rs-api"
    fitnesse "org.apache.httpcomponents:httpcore"
    fitnesse "org.apache.httpcomponents:httpmime"
    fitnesse "org.codehaus.groovy:groovy-all:${groovyAllVersion}"
    fitnesse "org.codehaus.groovy:groovy-dateutil:${groovyAllVersion}"
    fitnesse "org.codehaus.groovy.modules.http-builder:http-builder:${groovyHttpVersion}"
    fitnesse "org.liquibase:liquibase-core"
    fitnesse "org.springframework.data:spring-data-jpa"
    fitnesse "org.springframework:spring-context"
    fitnesse "org.springframework:spring-core"
}

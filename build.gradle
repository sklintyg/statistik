import se.inera.intyg.IntygPluginKt

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "se.inera.intyg.plugin.common" version "3.3.2" apply false
    id "io.spring.dependency-management" version "1.1.3" apply false
    id "se.inera.intyg.plugin.fitnesse" version "1.2.1" apply false
    id "com.netflix.nebula.node" version "3.0.0" apply false
    id "org.gretty" version "3.0.9" apply false
    id 'test-report-aggregation'
}

ext {
    infraVersion = System.properties['infraVersion'] ?: '3.21.0-SNAPSHOT'

    intygSchematronVersion = "1.0.57.1"
    rivtaClinicalprocessSchemasVersion = "4.0.5.2"
    internalMonitoringSchemaVersion = "1.0.4.1"
    intygTransportstyrelsenSchemasVersion = "1.0.5.1"

    auth0JwksVersion = "0.22.0"
    commonsIoVersion = "2.14.0"
    commonsLoggingVersion = "1.2"
    commonsTextVersion = "1.10.0"
    cxfVersion = "3.6.2"
    fitnesseVersion = "20231029"
    gatlingVersion = "3.9.5"
    geronimoVersion = "1.1.1"
    googleGuavaVersion = "32.1.3-jre"
    gparsVersion = "1.2.1"
    groovyAllVersion = "3.0.19"
    groovyHttpVersion = "0.7.1"
    jsonwebtokenVersion = "0.11.5"
    picocliVersion = "4.7.5"
    poiVersion = "5.2.4"
    schematronVersion = "5.6.5"
    springSecuritySamlVersion = "1.0.3.RELEASE"
    zipletVersion = "2.4.1"
    shedlockSpringVersion = "4.46.0"
    wagonVersion = "3.5.3"

    nodeJsVersion = "12.22.12"
    npmVersion = "6.14.16"

    springbootMavenBomVersion = "2.7.17"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: "io.spring.dependency-management"

    group = 'se.inera.statistik'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports { mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}" }
    }

    dependencies {
        implementation "ch.qos.logback:logback-classic"
        implementation "com.google.guava:guava:${googleGuavaVersion}"

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'junit:junit'
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-inline"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testImplementation "org.springframework:spring-test"

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
    tasks.register('createVersionPropertyFile', VersionPropertyFileTask)

    if (project.hasProperty('codeQuality')) {
        tasks.register('spotbugsIncludesAndExcludes') {
            dependsOn ":unzipBuildTools"
            def spotbugsToolDir = "${rootProject.layout.buildDirectory.get().asFile}/build-tools/spotbugs"
            spotbugsMain {
                includeFilter.set(file("${spotbugsToolDir}/spotbugsIncludeFilter.xml"))
                excludeFilter.set(file("${spotbugsToolDir}/spotbugsExcludeFilter.xml"))
            }
        }

        checkstyleMain.dependsOn createVersionPropertyFile
        jacocoTestReport.mustRunAfter createVersionPropertyFile
        spotbugsMain.dependsOn('spotbugsIncludesAndExcludes')
        spotbugsTest.enabled(false)
        dependencies { spotbugsSlf4j "org.slf4j:slf4j-simple" }
    }

    compileJava.dependsOn processResources
    compileTestJava.dependsOn createVersionPropertyFile
    test { exclude '**/*FunctionalTest.*' }

    repositories {
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    // Spotbugs does not work very well with groovy code. Hence we exclude groovy projects.
    // Errorprone has no mechanism (yet) for excluding generated code. We therefore disable it for hsa-integration.
    ext.spotbugsExclude = "(fileservice|.*groovy)\$"
    ext.errorproneExclude = "hsa-integration"
}

apply from: "checkPnr.gradle"

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}

configure(subprojects.findAll { ['statistik-service', 'web'].contains(it.name) }) {
    test { exclude '**/*IT*' }
    tasks.register('integrationTest', Test) {
        outputs.upToDateWhen { false }
        include '**/*IT*'
    }
}

tasks.register('tagRelease', TagReleaseTask)

tasks.register('unzipBuildTools', Copy) {
    into "${rootProject.layout.buildDirectory.get().asFile}/build-tools/"
    from { zipTree(rootProject.buildscript.configurations.classpath.find { it.name.contains("se.inera.intyg.plugin.common") })
            .matching { include "/spotbugs/**", "/git_hooks/**" }
    }
}

tasks.register('applyGitHooks') {
    dependsOn unzipBuildTools
    doLast {
        def repository = IntygPluginKt.findGitRepository(project.rootProject.projectDir)
        def gitHooksDir = "${rootProject.layout.buildDirectory.get().asFile}/build-tools/git_hooks"
        def commitMsg = file("${gitHooksDir}/commit-msg")
        def preCommit = file("${gitHooksDir}/pre-commit")
        def toDir = Paths.get(repository.directory.path, "hooks")

        if (!Files.exists(toDir)) { Files.createDirectory(toDir) }
        IntygPluginKt.copyFile(commitMsg, toDir)
        IntygPluginKt.copyFile(preCommit, toDir)
    }
}

createVersionPropertyFile.dependsOn(applyGitHooks)

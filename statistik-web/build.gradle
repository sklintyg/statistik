buildscript {
    dependencies {
        classpath 'com.moowork.gradle:gradle-grunt-plugin:0.10'
        classpath 'org.akhikhl.gretty:gretty:1.2.4' //Will be using springLoadedVersion:1.2.4.RELEASE due to "https://github.com/spring-projects/spring-loaded/issues/122", defined in gradle.properties
    }
}


apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'com.moowork.grunt'
apply plugin: 'org.akhikhl.gretty'

description = 'Inera Statistics Service - Web Module'


gretty {
    def jvmArgSpringProfiles = '-Dspring.profiles.active=dev,embedded,hsa-stub,wc-hsa-stub,security-fake'

    servletContainer = 'jetty9'
    contextPath = '/'

    if(project.hasProperty('runWithActiveMQ')) {
        contextConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty-activemq-context.xml"
        serverConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty.xml" //Configures the jetty server with an mbean server.
        jvmArgSpringProfiles += ',qm,active' //Add the needed spring profiles to start up an embedded activemq and hook it up to jmx
    } else {
        contextConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty-context.xml"
    }
    logbackConfigFile = "${projectDir}/src/main/resources/logback.xml"
    jvmArgs = [
            jvmArgSpringProfiles,
            '-Dstatistics.test.max.intyg=500',
            '-Dstatistics.config.file=' + projectDir + '/src/main/resources/default.dev.properties',
            '-Dstatistics.credentials.file=' + projectDir + '/src/main/resources/dev-credentials.properties'
    ]
    debugSuspend = false
    recompileOnSourceChange = false
    reloadOnClassChange = false
    reloadOnConfigChange = false
    reloadOnLibChange = false

}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = '6.5.0'
    download = true
}

if (project.hasProperty('statistik.useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
}
else {
    war.dependsOn grunt_build_no_minify
}

task bowerInstall(type: NodeTask, dependsOn:npmInstall) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('src/main/webapp/bower_components')
}

grunt_build.dependsOn bowerInstall
grunt_build_no_minify.dependsOn bowerInstall

task createVersionPropertyFile(dependsOn: processResources) << {
    def propertyFile = "${buildDir}/resources/main/version.properties"
    ant.touch(file: propertyFile, mkdirs: "true")
    ant.propertyfile(file: propertyFile) {
        entry(key: 'project.version', default: rootProject.version)
        entry(key: 'project.buildtime', default: new Date())
        entry(key: 'project.buildhost', default: InetAddress.localHost.hostName)
    }
}

jar.dependsOn createVersionPropertyFile

dependencies {
    compile project(':statistik-service')

    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySamlVersion}"
    compile "xml-apis:xml-apis:${xmlApisVersion}"
    compile "org.springframework:spring-webmvc:${springContextVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "xalan:xalan:${xalanVersion}"
    compile "com.github.ziplet:ziplet:${zipletVersion}"
    compile "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${monitoringSchemaVersion}"

    gretty "com.h2database:h2:${h2Version}"
    gretty "mysql:mysql-connector-java:${mysqlConnectorVersion}"
    gretty "org.apache.activemq:activemq-broker:${activeMqVersion}"
    gretty "org.apache.activemq:activemq-pool:${activeMqVersion}"
    gretty "org.apache.tomcat:tomcat-catalina:${tomcatVersion}"
    gretty "org.eclipse.jetty:jetty-jmx:${jettyJmxVersion}"

    providedCompile "javax.servlet:javax.servlet-api:${javaxServletVersion}"
    testRuntime "com.h2database:h2:${h2Version}"
}

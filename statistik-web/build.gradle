buildscript {
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.2.4' //Will be using springLoadedVersion:1.2.4.RELEASE due to "https://github.com/spring-projects/spring-loaded/issues/122", defined in gradle.properties
    }
}

plugins {
    id "com.moowork.node" version "0.8"
}

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

description = 'Inera Statistics Service - Web Module'


gretty {
    def jvmArgSpringProfiles = '-Dspring.profiles.active=dev,embedded,hsa-stub,wc-hsa-stub,security-fake'

    servletContainer = 'jetty9'
    contextPath = '/'

    if(project.hasProperty('runWithActiveMQ')) {
        contextConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty-activemq-context.xml"
        serverConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty.xml" //Configures the jetty server with an mbean server.
        jvmArgSpringProfiles += ',qm,active' //Add the needed spring profiles to start up an embedded activemq and hook it up to jmx
    } else {
        contextConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty-context.xml"
    }
    logbackConfigFile = "${projectDir}/src/main/resources/logback.xml"
    jvmArgs = [jvmArgSpringProfiles, '-Dstatistics.test.max.intyg=500']
}

node {
    version = '0.10.32'
    npmVersion = '2.0.0'
    download = true
}

//Enter the webjars dependencies here. Its a bit akward, but it is a workaround to keep karma tests
//and gretty/jetty happy
List webjars = [[group: 'org.webjars', name: 'jquery', version: '1.10.2'],
                [group: 'org.webjars', name: 'angularjs', version: '1.2.29'],
                [group: 'org.webjars', name: 'angular-ui-bootstrap', version: '0.12.1'],
                [group: 'org.webjars', name: 'bootstrap', version: '3.1.1'],
                [group: 'org.webjars', name: 'bootstrap-multiselect', version: '0.9.13'],
                [group: 'org.webjars.bower', name: 'lodash', version: '3.10.1'],
                [group: 'org.webjars', name: 'respond', version: '1.3.0'],
                [group: 'org.webjars', name: 'dropzone', version: '4.0.1'],
                [group: 'org.webjars', name: 'momentjs', version: '2.10.3'],
                [group: 'org.webjars', name: 'tablesorter', version: '2.17.8'],
                [group: 'org.webjars', name: 'outdated-browser', version: '1.1.0'],
                [group: 'org.webjars.bower', name: 'pdfmake', version: '0.1.20'],
                [group: 'org.webjars.bower', name: 'ngstorage', version: '0.3.10']]

task unzipWebjars(type: Copy) {
    description 'Copies anything that is a webjar from the classpath and expands it so that we can use their static resources with karma'

    into "$buildDir/webjars/"

    from {
        configurations.compile.filter{file ->
            webjars.any{jar -> file.name.startsWith(jar.name) }
        }.collect{zipTree(it)}
    }
}

task jsTests(type: NodeTask, dependsOn: [npmInstall, unzipWebjars]) {
    script = file('node_modules/grunt-cli/bin/grunt')
    args = ['test']
}

test.dependsOn(jsTests)

task createVersionPropertyFile(dependsOn: processResources) << {
    def propertyFile = "${buildDir}/resources/main/version.properties"
    ant.touch(file: propertyFile, mkdirs: "true")
    ant.propertyfile(file: propertyFile) {
        entry(key: 'project.version', default: rootProject.version)
        entry(key: 'project.buildtime', default: new Date())
        entry(key: 'project.buildhost', default: InetAddress.localHost.hostName)
    }
}

jar.dependsOn createVersionPropertyFile

dependencies {
    compile project(':statistik-service')

    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySamlVersion}"
    compile "xml-apis:xml-apis:${xmlApisVersion}"
    compile "org.springframework:spring-webmvc:${springContextVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "xalan:xalan:${xalanVersion}"

    compile webjars //Define your webjar in the list above

    gretty "com.h2database:h2:${h2Version}"
    gretty "mysql:mysql-connector-java:${mysqlConnectorVersion}"
    gretty "org.apache.activemq:activemq-broker:${activeMqVersion}"
    gretty "org.apache.activemq:activemq-pool:${activeMqVersion}"
    gretty "org.apache.tomcat:tomcat-catalina:${tomcatVersion}"
    gretty "org.eclipse.jetty:jetty-jmx:${jettyJmxVersion}"

    providedCompile "javax.servlet:javax.servlet-api:${javaxServletVersion}"
    testRuntime "com.h2database:h2:${h2Version}"
}

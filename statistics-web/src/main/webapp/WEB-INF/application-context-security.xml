<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <bean id="logProcessor" class="se.inera.statistics.service.processlog.Processor"/>

    <!-- Enable auto-wiring -->
    <context:annotation-config/>
    <context:component-scan base-package="org.springframework.security.saml"/>

    <!-- Unsecured pages -->
    <beans>
      <security:http security="none" pattern="/css/**"/>
      <security:http security="none" pattern="/bootstrap/**"/>
      <security:http security="none" pattern="/js/**"/>
      <security:http security="none" pattern="/img/**"/>
      <security:http security="none" pattern="/favicon.ico"/>
    </beans>

    <beans profile="test">
        <context:property-placeholder location="file:${user.home}/.test.statistik.se/config.properties" order="1" ignore-resource-not-found="true" ignore-unresolvable="true"/>
        <context:property-placeholder location="classpath*:default.test.properties" order="2" ignore-resource-not-found="false" ignore-unresolvable="false"/>
    </beans>
    <beans profile="qa">
        <context:property-placeholder location="file:${statistics.config.file}" order="1" ignore-resource-not-found="false" ignore-unresolvable="true"/>
        <context:property-placeholder location="classpath*:default.qa.properties" order="2" ignore-resource-not-found="false" ignore-unresolvable="false"/>
    </beans>
    <beans profile="dev">
        <context:property-placeholder location="classpath*:default.dev.properties" ignore-resource-not-found="true"/>
    </beans>

    <beans>
        <!-- Logger for SAML messages and events -->
        <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

        <bean id="userDetailsService" class="se.inera.auth.UserDetailsService"/>

        <!-- Initialization of OpenSAML library-->
        <bean class="org.springframework.security.saml.SAMLBootstrap"/>

        <!-- Initialization of the velocity engine -->
        <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
              factory-method="getEngine"/>

        <!-- XML parser pool needed for OpenSAML parsing -->
        <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" scope="singleton"
              init-method="initialize"/>
        <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"
              scope="singleton"/>

        <bean id="failureHandler"
              class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
            <property name="exceptionMappings">
                <props>
                    <prop key="se.inera.auth.exceptions.MissingMedarbetaruppdragException">
                        /error.jsp?reason=medarbetaruppdrag
                    </prop>
                    <prop key="org.springframework.security.authentication.BadCredentialsException">
                        /error.jsp?reason=badcredentials
                    </prop>
                </props>
            </property>
            <property name="defaultFailureUrl" value="/error.jsp"/>
        </bean>

        <bean id="http403ForbiddenEntryPoint"
              class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>
        <security:global-method-security pre-post-annotations="enabled" />
    </beans>
    <!-- =============================================================== -->
    <!-- Dev profile only supports Fake login                            -->
    <!-- =============================================================== -->
    <beans profile="dev">
        <security:http entry-point-ref="http403ForbiddenEntryPoint" pattern="/api/verksamhet/**">
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
        </security:http>
        <security:http entry-point-ref="http403ForbiddenEntryPoint" use-expressions="true">
            <security:logout logout-url="/saml/logout" logout-success-url="/" invalidate-session="true"/>
            <security:intercept-url pattern="/**" access="permitAll"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
        </security:http>
        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="fakeAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <!-- =============================================================== -->
    <!-- Test and QA profile support both S채kerhetstj채nst and Fake login -->
    <!-- =============================================================== -->
    <beans profile="test,qa">
        <security:http entry-point-ref="http403ForbiddenEntryPoint" pattern="/api/verksamhet/**">
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:http entry-point-ref="samlEntryPoint" use-expressions="true">
            <security:intercept-url pattern="/login.jsp*" access="isAnonymous()"/>
            <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="samlAuthenticationProvider"/>
            <security:authentication-provider ref="fakeAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <!-- =============================================================== -->
    <!-- Prod profile only supports S채kerhetstj채nst login                -->
    <!-- =============================================================== -->
    <beans profile="prod">
        <security:http entry-point-ref="http403ForbiddenEntryPoint" pattern="/api/**">
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:http entry-point-ref="samlEntryPoint">
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="samlAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <beans profile="dev,test,qa">
        <bean id="fakeAuthFilter" class="se.inera.auth.FakeAuthenticationFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="authenticationSuccessHandler" ref="fakeSuccessHandler"/>
            <property name="authenticationFailureHandler" ref="failureHandler"/>
        </bean>
        <bean id="fakeSuccessHandler"
              class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
            <property name="defaultTargetUrl" value="/#/verksamhet"/>
        </bean>
        <bean id="fakeAuthenticationProvider"
              class="se.inera.auth.FakeAuthenticationProvider">
            <property name="userDetails" ref="userDetailsService"/>
        </bean>
    </beans>

    <beans profile="test,qa,prod">
        <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
            <security:filter-chain-map request-matcher="ant">
                <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
                <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
                <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
                <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
                <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
                <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
            </security:filter-chain-map>
        </bean>

        <!-- Handler deciding where to redirect user after successful login -->
        <bean id="successRedirectHandler"
              class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
            <property name="defaultTargetUrl" value="/#/verksamhet"/>
        </bean>

        <!-- Central storage of cryptographic keys -->
        <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
            <constructor-arg value="${saml.keystore.file}"/>
            <constructor-arg type="java.lang.String" value="${saml.keystore.password}"/>
            <constructor-arg>
                <map>
                    <entry key="${saml.keystore.alias}" value="${saml.keystore.password}"/>
                </map>
            </constructor-arg>
            <constructor-arg type="java.lang.String" value="${saml.keystore.alias}"/>
        </bean>

        <!-- Entry point to initialize authentication, default values taken from properties file -->
        <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
            <property name="defaultProfileOptions">
                <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                    <property name="includeScoping" value="false"/>
                    <property name="authnContexts">
                        <list>
                            <value>urn:oasis:names:tc:SAML:2.0:ac:classes:TLSClient</value>
                        </list>
                    </property>
                </bean>
            </property>
        </bean>

        <!-- Filter automatically generates default SP metadata -->
        <bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
            <constructor-arg>
                <bean class="org.springframework.security.saml.metadata.MetadataGenerator">
                    <property name="entityId" value="${saml.entityId}"/>
                    <property name="entityBaseURL" value="${saml.entityBaseUrl}"/>
                    <property name="signMetadata" value="false"/>
                    <property name="includeDiscovery" value="false"/>
                    <property name="bindingsSSO" value="POST"/>
                </bean>
            </constructor-arg>
        </bean>

        <!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
        <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>

        <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
        <!-- Do no forget to call initalize method on providers -->
        <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
            <constructor-arg>
                <list>
                    <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                        <constructor-arg>
                            <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                                <constructor-arg>
                                    <value type="java.io.File">${saml.idp.metadata.file}</value>
                                </constructor-arg>
                                <property name="parserPool" ref="parserPool"/>
                            </bean>
                        </constructor-arg>
                        <constructor-arg>
                            <bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
                        </constructor-arg>
                        <property name="metadataTrustCheck" value="false"/>
                    </bean>
                </list>
            </constructor-arg>
            <property name="refreshCheckInterval" value="86400000"/>
            <!-- refresh meta data once a day -->
        </bean>

        <bean id="httpClientFactory" class="se.inera.auth.HttpClientFactory"/>
        <bean id="httpClient" factory-bean="httpClientFactory" factory-method="createInstance"/>

        <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
        <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
            <property name="userDetails" ref="userDetailsService"/>
        </bean>

        <!-- Processing filter for WebSSO profile messages -->
        <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
            <property name="authenticationFailureHandler" ref="failureHandler"/>
        </bean>

        <!-- Processing filter for WebSSO Holder-of-Key profile -->
        <bean id="samlWebSSOHoKProcessingFilter"
              class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        </bean>

        <!-- Class loading incoming SAML messages from httpRequest stream -->
        <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
            <constructor-arg>
                <list>
                    <ref bean="redirectBinding"/>
                    <ref bean="postBinding"/>
                    <ref bean="artifactBinding"/>
                </list>
            </constructor-arg>
        </bean>

        <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
            <constructor-arg ref="parserPool"/>
            <constructor-arg ref="velocityEngine"/>
            <constructor-arg>
                <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                    <constructor-arg>
                        <bean class="org.apache.commons.httpclient.HttpClient"/>
                    </constructor-arg>
                    <property name="processor">
                        <bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                            <constructor-arg ref="soapBinding"/>
                        </bean>
                    </property>
                </bean>
            </constructor-arg>
        </bean>

        <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
            <constructor-arg ref="parserPool"/>
        </bean>

        <!-- SAML 2.0 WebSSO Assertion Consumer -->
        <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl"/>

        <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
        <bean id="hokWebSSOprofileConsumer"
              class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

        <!-- SAML 2.0 Web SSO profile -->
        <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>

        <!-- SAML 2.0 Holder-of-Key Web SSO profile -->
        <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

        <!-- SAML 2.0 ECP profile -->
        <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

        <!-- SAML 2.0 Logout Profile -->
        <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

        <!-- Bindings, encoders and decoders used for creating and parsing messages -->
        <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
            <constructor-arg ref="parserPool"/>
            <constructor-arg ref="velocityEngine"/>
        </bean>

        <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
            <constructor-arg ref="parserPool"/>
        </bean>

        <!-- Provider of default SAML Context -->
        <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl"/>

        <!-- Logout handler terminating local session -->
        <bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
            <property name="invalidateHttpSession" value="true"/>
        </bean>

        <!-- Override default logout processing filter with the one processing SAML messages -->
        <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
            <constructor-arg ref="successLogoutHandler"/>
            <constructor-arg ref="logoutHandler"/>
            <constructor-arg ref="logoutHandler"/>
        </bean>

        <!-- Filter processing incoming logout messages -->
        <!-- First argument determines URL user will be redirected to after successful global logout -->
        <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
            <constructor-arg ref="successLogoutHandler"/>
            <constructor-arg ref="logoutHandler"/>
        </bean>

        <!-- Handler for successful logout -->
        <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
            <property name="defaultTargetUrl" value="/"/>
        </bean>
    </beans>
</beans>

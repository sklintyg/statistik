<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">


    <!-- Enable auto-wiring -->
    <context:annotation-config/>
    <context:component-scan base-package="org.springframework.security.saml"/>

    <!-- Unsecured pages -->
    <beans>
        <security:http security="none" pattern="/services/**"/>
        <security:http security="none" pattern="/app/**"/>
        <security:http security="none" pattern="/js/**"/>
        <security:http security="none" pattern="/assets/**"/>
    </beans>

    <beans>
        <!-- SessionRegistry is needed for keeping track of authenticated sessions (i.e users), this impl performs audit logging of login and logouts. -->
        <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

        <!-- Session authentication strategy that registers authenticated sessions with the session registry -->
        <bean id="registerSessionAuthenticationStrategy"
              class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
            <constructor-arg ref="sessionRegistry"/>
        </bean>

        <!-- Logger for SAML messages and events -->
        <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

        <bean id="userDetailsService" class="se.inera.auth.UserDetailsService"/>

        <!-- Initialization of OpenSAML library-->
        <bean class="org.springframework.security.saml.SAMLBootstrap"/>

        <!-- Initialization of the velocity engine -->
        <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
              factory-method="getEngine"/>

        <!-- XML parser pool needed for OpenSAML parsing -->
        <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" scope="singleton"
              init-method="initialize"/>
        <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"
              scope="singleton"/>

        <bean id="failureHandler"
              class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
            <property name="exceptionMappings">
                <props>
                    <prop key="se.inera.auth.exceptions.MissingMedarbetaruppdragException">
                        /error.jsp?reason=medarbetaruppdrag
                    </prop>
                    <prop key="org.springframework.security.authentication.BadCredentialsException">
                        /error.jsp?reason=badcredentials
                    </prop>
                </props>
            </property>
            <property name="defaultFailureUrl" value="/error.jsp"/>
        </bean>

        <bean id="http403ForbiddenEntryPoint"
              class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>
        <security:global-method-security pre-post-annotations="enabled"/>

        <!-- Custom service to resolve IdP names from metadata -->
        <bean id="idpNameDiscoveryService" class="se.inera.auth.idpdiscovery.IdpNameDiscoveryServiceImpl" />
    </beans>
    <!-- =============================================================== -->
    <!-- Dev profile only supports Fake login                            -->
    <!-- =============================================================== -->
    <beans profile="security-fake">
        <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint"
                       pattern="(\/api\/verksamhet\/.*)|(\/api\/landsting\/.*)" request-matcher="regex">
            <security:csrf disabled="true"/>
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
        </security:http>
        <security:http create-session="always" entry-point-ref="http403ForbiddenEntryPoint">
            <security:csrf disabled="true"/>
            <security:logout logout-url="/saml/logout" logout-success-url="/" invalidate-session="true"/>
            <security:intercept-url pattern="/**" access="permitAll"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
        </security:http>
        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="fakeAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <!-- =============================================================== -->
    <!-- Test and QA profile support both S채kerhetstj채nst and Fake login -->
    <!-- =============================================================== -->
    <beans profile="security-both">
        <security:http create-session="always" use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint"
                       pattern="(\/api\/verksamhet\/.*)|(\/api\/landsting\/.*)" request-matcher="regex">
            <security:csrf disabled="true"/>
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:http entry-point-ref="samlEntryPoint">
            <security:csrf disabled="true"/>
            <security:intercept-url pattern="/login.jsp*" access="isAnonymous()"/>
            <security:custom-filter position="PRE_AUTH_FILTER" ref="fakeAuthFilter"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="samlAuthenticationProvider"/>
            <security:authentication-provider ref="fakeAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <!-- =============================================================== -->
    <!-- Prod profile only supports S채kerhetstj채nst login                -->
    <!-- =============================================================== -->
    <beans profile="security-saml">

        <security:http use-expressions="false" entry-point-ref="http403ForbiddenEntryPoint"
                       pattern="(\/api\/verksamhet\/.*)|(\/api\/landsting\/.*)" request-matcher="regex">
            <security:csrf disabled="true"/>
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:http use-expressions="false" entry-point-ref="samlEntryPoint" pattern="/saml/**">
            <security:csrf disabled="true"/>
            <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
            <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        </security:http>
        <security:http create-session="always" entry-point-ref="http403ForbiddenEntryPoint" pattern="/api/login/**">
            <security:csrf disabled="true"/>
            <security:intercept-url pattern="/**" access="permitAll"/>
        </security:http>
        <security:authentication-manager alias="authenticationManager">
            <security:authentication-provider ref="samlAuthenticationProvider"/>
        </security:authentication-manager>
    </beans>

    <beans profile="security-fake,security-both">
        <bean id="fakeAuthFilter" class="se.inera.auth.FakeAuthenticationFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="authenticationSuccessHandler" ref="fakeSuccessHandler"/>
            <property name="authenticationFailureHandler" ref="failureHandler"/>
            <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
        </bean>
        <bean id="fakeSuccessHandler"
              class="se.inera.auth.CookieAuthenticationSuccessHandler">
            <property name="defaultTargetUrl" value="/#/verksamhet"/>
        </bean>
        <bean id="fakeAuthenticationProvider"
              class="se.inera.auth.FakeAuthenticationProvider">
            <property name="userDetails" ref="userDetailsService"/>
        </bean>
    </beans>

    <beans profile="security-saml,security-both">
        <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
            <security:filter-chain-map request-matcher="ant">
                <security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
                <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
                <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
                <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
            </security:filter-chain-map>
        </bean>

        <!-- Handler deciding where to redirect user after successful login -->
        <bean id="successRedirectHandler" class="se.inera.auth.CookieAuthenticationSuccessHandler">
            <property name="defaultTargetUrl" value="/#/verksamhet"/>
        </bean>

        <!-- Handler deciding where to redirect user after failed login -->
        <bean id="failureRedirectHandler"
              class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
            <property name="useForward" value="true"/>
            <property name="defaultFailureUrl" value="/#/login?error=loginfailed"/>
        </bean>

        <!-- Central storage of cryptographic keys -->
        <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
            <constructor-arg value="${saml.keystore.file}"/>
            <constructor-arg type="java.lang.String" value="${saml.keystore.password}"/>
            <constructor-arg>
                <map>
                    <entry key="${saml.keystore.alias}" value="${saml.keystore.password}"/>
                </map>
            </constructor-arg>
            <constructor-arg type="java.lang.String" value="${saml.keystore.alias}"/>
        </bean>

        <!-- Entry point to initialize authentication, default values taken from properties file -->
        <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
            <property name="defaultProfileOptions">
                <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                    <property name="includeScoping" value="false"/>
                    <property name="forceAuthN" value="true"/>
                    <property name="authnContexts">
                        <list>
                            <value>urn:oasis:names:tc:SAML:2.0:ac:classes:TLSClient</value>
                            <value>http://id.sambi.se/loa/loa3</value>
                        </list>
                    </property>
                </bean>
            </property>
        </bean>

        <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
        <!-- Do no forget to call initalize method on providers -->
        <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">

            <constructor-arg>
                <list>

                    <!-- START SERVICE PROVIDER BEAN FOR SITHS -->
                    <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                        <constructor-arg>
                            <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                                <constructor-arg>
                                    <value type="java.io.File">${saml.sp.metadata.file}</value>
                                </constructor-arg>
                                <property name="parserPool" ref="parserPool"/>
                            </bean>
                        </constructor-arg>
                        <property name="metadataTrustCheck" value="true"/>

                        <constructor-arg>
                            <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                                <property name="alias" value="${sakerhetstjanst.saml.default.alias}"/>
                                <property name="local" value="true"/>
                                <property name="securityProfile" value="metaiop"/>
                                <property name="sslSecurityProfile" value="metaiop"/>
                                <property name="signMetadata" value="true"/>
                                <!-- The signingKey and encryptionKey refers to the _aliases_ of the key in the keystore defined in the keyManager bean -->
                                <property name="signingKey"
                                          value="${saml.keystore.alias}"/>          <!-- sakerhetstjanst.saml.keystore.alias -->
                                <property name="encryptionKey"
                                          value="${saml.keystore.alias}"/>       <!-- sakerhetstjanst.saml.keystore.alias -->
                                <property name="requireArtifactResolveSigned" value="true"/>
                                <property name="requireLogoutRequestSigned" value="true"/>
                                <property name="requireLogoutResponseSigned" value="false"/>

                                <property name="idpDiscoveryEnabled" value="true"/>
                                <property name="idpDiscoveryResponseURL" value="${sambi.discovery.response.url}"/>
                                <property name="idpDiscoveryURL" value="${sambi.discovery.url}"/>
                            </bean>
                        </constructor-arg>
                    </bean>
                    <!--  END SERVICE PROVIDER BEAN FOR SITHS -->


                    <!-- START IDENTITY PROVIDER BEAN FOR SITHS -->
                    <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                        <constructor-arg>
                            <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                                <constructor-arg>
                                    <value type="java.io.File">${saml.idp.metadata.file}</value>
                                </constructor-arg>
                                <property name="parserPool" ref="parserPool"/>
                            </bean>
                        </constructor-arg>
                        <constructor-arg>
                            <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                                <property name="alias" value="${sakerhetstjanst.saml.default.alias}"/>
                            </bean>
                        </constructor-arg>

                        <property name="metadataTrustCheck" value="false"/>
                    </bean>
                    <!-- END IDENTITY PROVIDER BEAN FOR SITHS -->


                </list>
            </constructor-arg>
            <property name="refreshCheckInterval" value="86400000"/>

        </bean>

        <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
        <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
            <property name="userDetails" ref="userDetailsService"/>
            <property name="forcePrincipalAsString" value="false"/>
        </bean>

        <!-- Processing filter for WebSSO profile messages -->
        <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
            <property name="authenticationFailureHandler" ref="failureHandler"/>
            <property name="sessionAuthenticationStrategy" ref="registerSessionAuthenticationStrategy"/>
        </bean>

        <!-- Processing filter for WebSSO Holder-of-Key profile -->
        <bean id="samlWebSSOHoKProcessingFilter"
              class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
            <property name="authenticationManager" ref="authenticationManager"/>
            <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        </bean>

        <!-- Class loading incoming SAML messages from httpRequest stream -->
        <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
            <constructor-arg>
                <list>
                    <ref bean="redirectBinding"/>
                    <ref bean="postBinding"/>
                    <ref bean="artifactBinding"/>
                </list>
            </constructor-arg>
        </bean>

        <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
            <constructor-arg ref="parserPool"/>
            <constructor-arg ref="velocityEngine"/>
            <constructor-arg>
                <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                    <constructor-arg>
                        <bean class="org.apache.commons.httpclient.HttpClient"/>
                    </constructor-arg>
                    <property name="processor">
                        <bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                            <constructor-arg ref="soapBinding"/>
                        </bean>
                    </property>
                </bean>
            </constructor-arg>
        </bean>

        <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
            <constructor-arg ref="parserPool"/>
        </bean>

        <!-- SAML 2.0 WebSSO Assertion Consumer -->
        <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl"/>

        <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
        <bean id="hokWebSSOprofileConsumer"
              class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

        <!-- SAML 2.0 Web SSO profile -->
        <bean id="webSSOprofile" class="se.inera.auth.StatistikWebSSOProfileImpl"/>

        <!-- SAML 2.0 Holder-of-Key Web SSO profile  -->
        <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

        <!-- SAML 2.0 ECP profile
        <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>
        -->

        <!-- SAML 2.0 Logout Profile -->
        <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

        <!-- Bindings, encoders and decoders used for creating and parsing messages -->
        <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
            <constructor-arg ref="parserPool"/>
            <constructor-arg ref="velocityEngine"/>
        </bean>

        <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
            <constructor-arg ref="parserPool"/>
        </bean>

        <!-- Provider of default SAML Context -->
        <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
            <property name="storageFactory">
                <bean class="org.springframework.security.saml.storage.EmptyStorageFactory"/>
            </property>
        </bean>

        <!-- Logout handler terminating local session -->
        <bean id="logoutHandler"
              class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
            <property name="invalidateHttpSession" value="true"/>
        </bean>

        <!-- Override default logout processing filter with the one processing SAML messages -->
        <bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
            <constructor-arg ref="successLogoutHandler"/>
            <constructor-arg ref="logoutHandler"/>
            <constructor-arg ref="logoutHandler"/>
        </bean>

        <!-- Filter processing incoming logout messages -->
        <!-- First argument determines URL user will be redirected to after successful global logout -->
        <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
            <constructor-arg ref="successLogoutHandler"/>
            <constructor-arg ref="logoutHandler"/>
        </bean>

        <!-- Handler for successful logout -->
        <bean id="successLogoutHandler"
              class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
            <property name="defaultTargetUrl" value="/"/>
        </bean>
    </beans>
</beans>

apply plugin: 'com.netflix.nebula.grunt'
apply plugin: 'org.gretty'
apply plugin: 'idea'
apply plugin: 'war'

gretty {
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8050 + (instance as Integer)
    def useInternalHttpPort = 8150 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"
    def baseUrl = "http://localhost:${useHttpPort}"

    servletContainer = 'tomcat10'
    contextPath = '/'
    scanInterval = 0
    debugPort = 8850 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    recompileOnSourceChange = false
    reloadOnClassChange = false
    reloadOnConfigChange = false
    reloadOnLibChange = false
    serverConfigFile = "tomcat-gretty.xml"
    setManagedClassReload(false)

    jvmArgs = ["-Dcatalina.base=${project.layout.buildDirectory.get().asFile}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled,hsa-caching-disabled,testapi,hsa-stub,wc-hsa-stub,security-both,noprocessing,ia-stub,request-caching-enabled,hsa-integration-intyg-proxy-service,testability",
               "-Dlogback.file=${applicationDir}/config/logback-spring.xml",
               "-Djava.awt.headless=true",
               "-Dfile.encoding=UTF-8",
               "-Dstatistics.test.max.intyg=200",
               "-DbaseUrl=http://localhost:${useHttpPort}",
               "-Dapplication.dir=${applicationDir}",
               "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
               "-Ddev.http.port=${useHttpPort}",
               "-Ddev.http.port.internal=${useInternalHttpPort}"
    ]
}

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}")
}

if (project.hasProperty('useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else if (project.hasProperty('useNoMinifiedJavaScriptNoKarma')) {
    war.dependsOn grunt_build_no_minify_no_karma
} else {
    war.dependsOn grunt_build_no_minify
}

grunt { colors = true }
grunt_build.dependsOn npmInstall
grunt_build_no_minify.dependsOn npmInstall
grunt_build_no_minify_no_karma.dependsOn npmInstall

dependencies {
    implementation project(':hsa-integration')
    implementation project(':statistik-service')
    implementation project(':logging')

    implementation "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${internalMonitoringSchemaVersion}"

    implementation "se.inera.intyg.infra:driftbanner-dto:${infraVersion}"
    implementation "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    implementation "se.inera.intyg.infra:ia-integration:${infraVersion}"
    implementation "se.inera.intyg.infra:monitoring:${infraVersion}"
    implementation "se.inera.intyg.infra:security-filter:${infraVersion}"
    implementation "se.inera.intyg.infra:security-common:${infraVersion}"

    implementation "co.elastic.logging:logback-ecs-encoder:${logbackEcsEncoderVersion}"
    implementation "com.auth0:jwks-rsa:${auth0JwksVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation 'jakarta.servlet:jakarta.servlet-api'
    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
    implementation "io.prometheus:simpleclient_servlet"
    implementation "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api"
    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockSpringVersion}"
    implementation "org.apache.commons:commons-text:${commonsTextVersion}"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}"
    implementation "org.apache.poi:poi-ooxml:${poiVersion}"
    implementation "org.glassfish.web:jakarta.servlet.jsp.jstl"
    implementation "org.liquibase:liquibase-core"
    implementation "org.springframework:spring-jms"
    implementation 'org.opensaml:opensaml-core'
    implementation 'org.opensaml:opensaml-saml-api'
    implementation 'org.opensaml:opensaml-saml-impl'
    implementation 'org.springframework.security:spring-security-saml2-service-provider'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework:spring-webmvc'

    compileOnly "jakarta.persistence:jakarta.persistence-api"
    compileOnly "jakarta.ws.rs:jakarta.ws.rs-api"

    runtimeOnly "com.mysql:mysql-connector-j"
    runtimeOnly "se.inera.intyg.infra:hsa-integration-intyg-proxy-service:${infraVersion}"

    testImplementation "jakarta.transaction:jakarta.transaction-api"
    testCompileOnly "jakarta.persistence:jakarta.persistence-api"
}
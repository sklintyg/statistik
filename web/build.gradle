apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'idea'

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}")
}

if (project.hasProperty('useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else {
    war.dependsOn grunt_build_no_minify
}

grunt_build.dependsOn npmInstall
grunt_build_no_minify.dependsOn npmInstall

war.dependsOn createVersionPropertyFile

task zipResources(type: ArchiveDirectoryTask) {
    sourcePath "../src/main/resources"
    include "*"
    include "*/*" //to include contents of a folder present inside from directory
    archiveName "resources.zip"
    destinationDir(file("../devops/openshift/test/env"))
    archiveOnlyIfDiff file("${destinationDir}/${archiveName}").exists()
}

build.dependsOn zipResources

gretty {
    def baseUrl = 'http://localhost:8080'
    def jvmArgSpringProfiles = '-Dspring.profiles.active=dev,caching-enabled,testapi,embedded,hsa-stub,wc-hsa-stub,security-both,noprocessing,ia-stub'

    servletContainer = 'jetty9'
    contextPath = '/'
    contextConfigFile = "${projectDir}/src/main/webapp/WEB-INF/jetty-context.xml"

    if (project.hasProperty('runWithIntyg')) {
        httpPort = 9101
        baseUrl = 'http://localhost:9101'
    }

    scanInterval = 0
    debugPort = 5011
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    recompileOnSourceChange = false
    reloadOnClassChange = false
    reloadOnConfigChange = false
    reloadOnLibChange = false

    jvmArgs = [
            jvmArgSpringProfiles,
            '-Dsaml.resource.dir=' + projectDir + '/../devops/dev',
            '-DbaseUrl=' + baseUrl,
            '-Dstatistics.test.max.intyg=200',
            '-Dstatistics.config.file=' + projectDir + '/src/test/resources/dev.properties',
            '-Dstatistics.credentials.file=' + projectDir + '/src/test/resources/dev-credentials.properties',
            '-Dstatistics.resources.folder=classpath:'
    ]
}

dependencies {
    compile project(':statistik-service')

    compile "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${monitoringSchemaVersion}"
    compile "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    compile "se.inera.intyg.infra:security-filter:${infraVersion}"
    compile "se.inera.intyg.infra:ia-integration:${infraVersion}"

    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySamlVersion}"
    compile "xml-apis:xml-apis:${xmlApisVersion}"
    compile "org.springframework:spring-webmvc:${springContextVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "org.apache.commons:commons-text:${commonsTextVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "xalan:xalan:${xalanVersion}"
    compile "com.github.ziplet:ziplet:${zipletVersion}"
    compile "org.springframework.session:spring-session:${springSessionVersion}"
    compile "org.apache.activemq:activemq-spring:${activeMqVersion}"
    compile "org.springframework:spring-jms:${springContextVersion}"
    compile "mysql:mysql-connector-java:${mysqlConnectorVersion}"

    compileOnly "javax.servlet:javax.servlet-api:${javaxServletVersion}"

    gretty "org.apache.tomcat:tomcat-catalina:${tomcatVersion}"
    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"
}

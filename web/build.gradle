apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'nebula.grunt'
apply plugin: 'idea'

idea {
    module {
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = "${nodeJsVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}")
}

if (project.hasProperty('useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
} else if (project.hasProperty('useNoMinifiedJavaScriptNoKarma')) {
    war.dependsOn grunt_build_no_minify_no_karma
} else {
    war.dependsOn grunt_build_no_minify
}

grunt_build.dependsOn npmInstall
grunt_build_no_minify.dependsOn npmInstall
grunt_build_no_minify_no_karma.dependsOn npmInstall

war.dependsOn createVersionPropertyFile

gretty {
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8050 + (instance as Integer)
    def useInternalHttpPort = 8150 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"
    def baseUrl = "http://localhost:${useHttpPort}"

    servletContainer = 'tomcat9'
    contextPath = '/'


    scanInterval = 0
    debugPort = 8850 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    fastReload = true
    inplaceMode = 'hard'
    recompileOnSourceChange = false
    reloadOnClassChange = false
    reloadOnConfigChange = false
    reloadOnLibChange = false
    serverConfigFile = "tomcat-gretty.xml"

    jvmArgs = ["-Dcatalina.base=${buildDir}/catalina.base",
               "-Dspring.profiles.active=dev,caching-enabled,hsa-caching-disabled,testapi,hsa-stub,wc-hsa-stub,security-both,noprocessing,ia-stub",
               "-Dlogback.file=${applicationDir}/config/logback-dev.xml",
               "-Djava.awt.headless=true",
               "-Dfile.encoding=UTF-8",
               "-Dstatistics.test.max.intyg=200",
               "-DbaseUrl=http://localhost:${useHttpPort}",
               "-Dapplication.dir=${applicationDir}",
               "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
               "-Ddev.http.port=${useHttpPort}",
               "-Ddev.http.port.internal=${useInternalHttpPort}"
    ]
}

dependencies {
    compile project(':statistik-service')

    compile "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${internalMonitoringSchemaVersion}"
    compile "se.inera.intyg.infra:dynamiclink:${infraVersion}"
    compile "se.inera.intyg.infra:security-filter:${infraVersion}"
    compile "se.inera.intyg.infra:ia-integration:${infraVersion}"
    compile "se.inera.intyg.infra:monitoring:${infraVersion}"

    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecuritySamlVersion}"
    compile "xml-apis:xml-apis:${xmlApisVersion}"
    compile "org.springframework:spring-webmvc"
    compile "org.apache.commons:commons-lang3"

    compile "org.apache.cxf:cxf-rt-features-logging:${cxfVersion}"

    compile "org.apache.commons:commons-text:${commonsTextVersion}"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-taglibs"
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "xalan:xalan:${xalanVersion}"
    compile "com.github.ziplet:ziplet:${zipletVersion}"
    compile "org.springframework.session:spring-session-data-redis"
    compile "org.apache.activemq:activemq-spring"
    compile "org.springframework:spring-jms"
    compile "mysql:mysql-connector-java"

    compile "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    compile "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
    compile "com.auth0:jwks-rsa:${auth0JwksVersion}"
    compile "com.sun.activation:jakarta.activation"
    compile "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api"

    compile "org.liquibase:liquibase-core"

    compileOnly "javax.servlet:javax.servlet-api"

    gretty "jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api"
    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"
}
